@page "/prompts-manager"
@using System.IO
@inject HttpClient Http
@inject IJSRuntime JS

<style>
    .container {
        max-width: 800px;
        margin: 20px auto;
    }

    .controls {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
        align-items: center;
    }

    .prompt-type {
        font-size: 1.2rem;
        font-weight: bold;
    }

    .button-group {
        display: flex;
        gap: 10px;
    }

    .btn {
        padding: 10px 15px;
        border-radius: 4px;
        border: none;
        cursor: pointer;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .json-view {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 4px;
        border: 1px solid #ddd;
        max-height: 400px;
        overflow-y: auto;
        font-family: monospace;
        white-space: pre-wrap;
        width: 100%;
        min-height: 400px;
    }

    .btn-save {
        margin-top: 10px;
        width: 100%;
    }

    .custom-select {
        width: 300px; /* Grandezza fissa per la dropdown */
    }

    /* Allinea il tasto di caricamento in alto a destra */
    .upload-btn-container {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 20px;
    }
</style>

<div class="container">
    <div class="controls">
        <div>
            <label for="promptTypeSelect">Seleziona il tipo di prompt:</label>
            <select id="promptTypeSelect" class="custom-select" @onchange="OnPromptTypeChanged">
                <option value="System">System</option>
                <option value="User">User</option>
            </select>
            <button class="btn" @onclick="TriggerFileUpload">
                <i class="bi bi-upload"></i>
            </button>
        </div>
        <InputFile id="fileInput" style="display:none;" OnChange="HandleFileSelected" />
    </div>

    <div class="controls">
        <div>
            <label for="promptSelect">Seleziona un prompt da modificare:</label>
            <select id="promptSelect" class="custom-select" @onchange="OnPromptFileChanged">
                <option value="">-- Seleziona un prompt --</option>
                @foreach (var file in promptFiles)
                {
                    <option value="@file">@file</option>
                }
            </select>
        </div>
    </div>

    <div>
        <textarea class="json-view" @bind="promptContent"></textarea>
        <button class="btn btn-primary btn-save" @onclick="SavePromptContent">Salva Modifiche</button>
    </div>

</div>

@code {
    private string selectedPromptType = "System";
    private string selectedPromptFile;
    private List<string> promptFiles = new List<string>();
    private string promptContent;
    private IBrowserFile selectedFile;

    protected override async Task OnInitializedAsync()
    {
        await LoadPromptFiles();
    }

    private async Task OnPromptTypeChanged(ChangeEventArgs e)
    {
        selectedPromptType = e.Value.ToString();
        await LoadPromptFiles();
    }

    private async Task LoadPromptFiles()
    {
        // Simula il caricamento dei file di prompt dalla cartella selezionata
        var folderPath = selectedPromptType == "System" ? "System" : "User";
        var response = await Http.GetAsync($"api/prompts/get-files?folder={folderPath}");

        if (response.IsSuccessStatusCode)
        {
            promptContent = string.Empty;
            selectedPromptFile = null;
            promptFiles = await response.Content.ReadFromJsonAsync<List<string>>();
        }
        else
        {
            await JS.InvokeVoidAsync("showSwal", "error", "Errore nel caricamento dei file di prompt.");
        }
    }

    private async Task OnPromptFileChanged(ChangeEventArgs e)
    {
        selectedPromptFile = e.Value.ToString();
        await LoadPromptContent();
    }

    private async Task LoadPromptContent()
    {
        if (string.IsNullOrEmpty(selectedPromptFile))
        {
            promptContent = string.Empty;
            return;
        }

        // Carica il contenuto del prompt selezionato
        var folderPath = selectedPromptType == "System" ? "System" : "User";
        var response = await Http.GetAsync($"api/prompts/get-content?folder={folderPath}&file={selectedPromptFile}");

        if (response.IsSuccessStatusCode)
        {
            promptContent = string.Empty;
            promptContent = await response.Content.ReadAsStringAsync();
        }
        else
        {
            await JS.InvokeVoidAsync("showSwal", "error", "Errore nel caricamento del contenuto del prompt.");
        }
    }

    private async Task SavePromptContent()
    {
        // Salva le modifiche al prompt selezionato
        var folderPath = selectedPromptType == "System" ? "System" : "User";
        var content = new StringContent(System.Text.Json.JsonSerializer.Serialize(promptContent), System.Text.Encoding.UTF8, "application/json");
        var response = await Http.PostAsync($"api/prompts/save-content?folder={folderPath}&file={selectedPromptFile}", content);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("showSwal", "success", "Modifiche salvate con successo.");
            await LoadPromptFiles();
        }
        else
        {
            await JS.InvokeVoidAsync("showSwal", "error", "Errore nel salvataggio del prompt.");
        }
    }

    private async Task TriggerFileUpload()
    {
        await JS.InvokeVoidAsync("triggerFileInputClick", "fileInput");
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var folderPath = selectedPromptType == "System" ? "System" : "User";
            var content = new MultipartFormDataContent();
            content.Add(new StreamContent(file.OpenReadStream()), "file", file.Name);

            var response = await Http.PostAsync($"api/prompts/upload?type={folderPath}", content);
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("showSwal", "success", $"{file.Name} caricato con successo.");
                await LoadPromptFiles();
            }
            else
            {
                await JS.InvokeVoidAsync("showSwal", "error", "Errore durante l'upload del file.");
            }
        }
    }
}
