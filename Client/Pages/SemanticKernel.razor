@page "/riconciliazione"
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JS

<style>
    .container {
        display: table-caption;
        grid-template-columns: 1fr;
        gap: 1rem;
        margin-top: 20px;
        max-width: 800px;
        margin-left: auto;
        margin-right: auto;
    }

    .controls {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .custom-select {
        padding: 8px;
        font-size: 1rem;
        border-radius: 4px;
        border: 1px solid #ccc;
    }

    .button-group {
        display: flex;
        gap: 10px;
    }

    .btn {
        padding: 8px 16px;
        font-size: 1rem;
        cursor: pointer;
        border-radius: 4px;
        border: none;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .table-container {
        max-height: 500px;
        overflow-y: auto;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table thead {
            background-color: #f8f9fa;
            position: sticky;
            top: 0;
            z-index: 1;
        }

        .table th, .table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #dee2e6;
        }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f2f2f2;
    }

    .json-view {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 4px;
        border: 1px solid #ddd;
        max-height: 400px;
        overflow-y: auto;
        font-family: monospace;
    }

    input[type="file"] {
        display: none;
    }

    @@media (min-width: 768px) {
        .controls {
            flex-direction: row;
            align-items: center;
        }

        .custom-select {
            width: 300px;
        }

        .button-group {
            margin-left: auto;
        }
    }
</style>

<h3>Riconciliazione bancaria</h3>

<div class="container">
    <div class="controls">
        <p for="csvSelect">Seleziona un file CSV:</p>
    </div>
    <div class="controls">
        <select id="systemPromptSelect" class="custom-select" @bind="selectedSystemPrompt">
            <option value="">-- Seleziona un system prompt --</option>
            @foreach (var prompt in systemPrompts)
            {
                <option value="@prompt">@prompt</option>
            }
        </select>

        <select id="userPromptSelect" class="custom-select" @bind="selectedUserPrompt">
            <option value="">-- Seleziona un template --</option>
            @foreach (var prompt in userPrompts)
            {
                <option value="@prompt">@prompt</option>
            }
        </select>
    </div>
    <br />

    <div class="controls">
        <select id="csvSelect" class="custom-select" @bind="selectedCsvFile">
            <option value="">-- Seleziona un file --</option>
            @foreach (var file in csvFiles)
            {
                <option value="@file">@file</option>
            }
        </select>
        <button class="btn" @onclick="TriggerFileUpload">
            <i class="bi bi-upload"></i>
        </button>

        <InputFile id="fileInput" style="display:none;" OnChange="HandleFileSelected" />

        <div class="button-group">
            <button class="btn btn-primary" @onclick="InterrogateSemanticKernel" disabled="@isLoading">Interroga</button>
            @if (tableData != null)
            {
                <button class="btn btn-secondary" @onclick="ToggleView">
                    <i class="bi bi-arrow-repeat"></i>
                </button>
            }
        </div>
    </div>

    <br />
    <br />

    @if (isLoading)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Caricamento...</span>
        </div>
    }
</div>

@if (tableData != null)
{
    @if (isTableView)
    {
        <div class="table-container">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Numero Documento</th>
                        <th>Data Documento</th>
                        <th>Proprietario</th>
                        <th>Tipo Movimento</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in tableData)
                    {
                        <tr>
                            <td>@item.document_number</td>
                            <td>@item.document_date</td>
                            <td>@item.owner</td>
                            <td>@item.tpmovimento</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="container" style="display: block !important; max-width: none;">
            <button class="btn btn-secondary" @onclick="CopyJsonToClipboard" style="display: block;">
                <i class="bi bi-copy"></i>
            </button>
            <br />
            <pre class="json-view">@JsonSerializer.Serialize(tableData, new JsonSerializerOptions { WriteIndented = true })</pre>
        </div>
    }
}

@code {
    private bool isLoading = false;
    private List<string> csvFiles = new List<string>();
    private List<string> systemPrompts = new List<string>();
    private List<string> userPrompts = new List<string>();
    private string selectedCsvFile;
    private string selectedSystemPrompt;
    private string selectedUserPrompt;
    private List<MyData> tableData;
    private bool isTableView = true;
    private IBrowserFile selectedFile;

    protected override async Task OnInitializedAsync()
    {
        await LoadSystemPrompts();
        await LoadUserPrompts();
        await LoadCsvFiles();
    }

    private async Task LoadCsvFiles()
    {
        var response = await Http.GetAsync("api/SemanticKernel/get-csv-files");
        if (response.IsSuccessStatusCode)
        {
            csvFiles = await response.Content.ReadFromJsonAsync<List<string>>();
        }
        else
        {
            await JS.InvokeVoidAsync("showSwal", "error", "Errore nel caricamento dei file CSV.");
        }
    }

    private async Task LoadSystemPrompts()
    {
        var response = await Http.GetAsync("api/prompts/get-files?folder=System");
        if (response.IsSuccessStatusCode)
        {
            systemPrompts = await response.Content.ReadFromJsonAsync<List<string>>();
        }
        else
        {
            await JS.InvokeVoidAsync("showSwal", "error", "Errore nel caricamento dei prompt.");
        }
    }

    private async Task LoadUserPrompts()
    {
        var response = await Http.GetAsync("api/prompts/get-files?folder=User");
        if (response.IsSuccessStatusCode)
        {
            userPrompts = await response.Content.ReadFromJsonAsync<List<string>>();
        }
        else
        {
            await JS.InvokeVoidAsync("showSwal", "error", "Errore nel caricamento dei prompt.");
        }
    }

    private async Task TriggerFileUpload()
    {
        await JS.InvokeVoidAsync("triggerFileInputClick", "fileInput");
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var content = new MultipartFormDataContent();
            content.Add(new StreamContent(file.OpenReadStream()), "file", file.Name);

            var response = await Http.PostAsync("api/SemanticKernel/upload", content);
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("showSwal", "success", $"{file.Name} caricato con successo.");
                await LoadCsvFiles();
            }
            else
            {
                await JS.InvokeVoidAsync("showSwal", "error", "Errore durante l'upload del file.");
            }
        }
    }

    private async Task InterrogateSemanticKernel()
    {
        if (string.IsNullOrEmpty(selectedSystemPrompt) || string.IsNullOrEmpty(selectedUserPrompt) || string.IsNullOrEmpty(selectedCsvFile))
        {
            return;
        }

        isLoading = true;
        StateHasChanged();

        try
        {
            var response = await Http.PostAsJsonAsync("api/SemanticKernel/riconciliazione", new RiconciliazioneRequest { SystemPrompt = selectedSystemPrompt, UserPrompt = selectedUserPrompt, CsvFile = selectedCsvFile });
            if (response.IsSuccessStatusCode)
            {
                var jsonString = await response.Content.ReadAsStringAsync();
                tableData = JsonSerializer.Deserialize<List<MyData>>(jsonString);
                await JS.InvokeVoidAsync("showSwal", "success", "Dati recuperati con successo.");
            }
            else
            {
                await JS.InvokeVoidAsync("showSwal", "error", "Errore nell'interrogazione dei dati.");
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ToggleView()
    {
        isTableView = !isTableView;
    }

    private async Task CopyJsonToClipboard()
    {
        var jsonData = JsonSerializer.Serialize(tableData, new JsonSerializerOptions { WriteIndented = true });
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", jsonData);
        await JS.InvokeVoidAsync("showSwal", "success", "JSON copiato negli appunti.");
    }

    public class RiconciliazioneRequest
    {
        public string SystemPrompt { get; set; }
        public string UserPrompt { get; set; }
        public string CsvFile { get; set; }
    }

    public class MyData
    {
        public string document_number { get; set; }
        public string document_date { get; set; }
        public string owner { get; set; }
        public int tpmovimento { get; set; }
    }
}
